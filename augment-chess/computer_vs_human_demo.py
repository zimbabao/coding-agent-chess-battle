#!/usr/bin/env python3
"""
Computer vs Human Demo - Shows the enhanced chess interface with computer opponents
"""

import webbrowser
import requests
import json
import time
import sys

def test_computer_functionality(port=8083):
    """Test the computer vs human functionality."""
    base_url = f"http://localhost:{port}"
    
    print("ü§ñ COMPUTER VS HUMAN FUNCTIONALITY TEST")
    print("=" * 50)
    
    try:
        # Test setting game modes
        print("\nüéÆ Testing Game Mode Settings:")
        
        modes_to_test = [
            ('human_vs_human', 'Human vs Human'),
            ('human_vs_computer_white', 'Human vs Computer (Computer plays White)'),
            ('human_vs_computer_black', 'Human vs Computer (Computer plays Black)'),
            ('computer_vs_computer', 'Computer vs Computer')
        ]
        
        for mode, description in modes_to_test:
            print(f"\n  Testing: {description}")
            
            # Set game mode
            response = requests.post(f"{base_url}/api/set_game_mode", 
                                   json={'mode': mode}, timeout=5)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print(f"  ‚úÖ Mode set successfully")
                    print(f"     Computer White: {result.get('computer_white')}")
                    print(f"     Computer Black: {result.get('computer_black')}")
                else:
                    print(f"  ‚ùå Failed to set mode")
            else:
                print(f"  ‚ùå HTTP error: {response.status_code}")
        
        # Test computer move functionality
        print(f"\nüß† Testing Computer Move Functionality:")
        
        # Set to human vs computer mode
        requests.post(f"{base_url}/api/set_game_mode", 
                     json={'mode': 'human_vs_computer_black'}, timeout=5)
        
        # Start new game
        requests.post(f"{base_url}/api/new_game", 
                     json={'chess960': False}, timeout=5)
        
        # Make a human move (white)
        response = requests.post(f"{base_url}/api/make_move", 
                               json={'move': 'e2e4'}, timeout=5)
        
        if response.status_code == 200 and response.json().get('success'):
            print("  ‚úÖ Human move (e2e4) made successfully")
            
            # Now test computer move
            print("  ü§ñ Testing computer move...")
            response = requests.post(f"{base_url}/api/computer_move", 
                                   json={'depth': 3, 'time_limit': 2.0}, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print(f"  ‚úÖ Computer move successful: {result.get('move')}")
                    print(f"     Evaluation: {result.get('evaluation')}")
                else:
                    print(f"  ‚ùå Computer move failed: {result.get('error')}")
            else:
                print(f"  ‚ùå Computer move HTTP error: {response.status_code}")
        else:
            print("  ‚ùå Failed to make human move")
        
        # Test game info with computer mode
        print(f"\nüìä Testing Game Info with Computer Mode:")
        response = requests.get(f"{base_url}/api/game_info", timeout=5)
        
        if response.status_code == 200:
            info = response.json()
            print(f"  ‚úÖ Game info retrieved")
            print(f"     Game Mode: {info.get('game_mode')}")
            print(f"     Computer White: {info.get('computer_white')}")
            print(f"     Computer Black: {info.get('computer_black')}")
            print(f"     Current Player is Computer: {info.get('current_player_is_computer')}")
            print(f"     Move Count: {info.get('move_count')}")
        else:
            print(f"  ‚ùå Failed to get game info")
        
        print(f"\nüéâ Computer functionality tests completed!")
        return True
        
    except requests.exceptions.ConnectionError:
        print(f"‚ùå Could not connect to web server at {base_url}")
        return False
    except Exception as e:
        print(f"‚ùå Error testing computer functionality: {e}")
        return False

def demo_computer_vs_human():
    """Demonstrate the computer vs human features."""
    
    print("ü§ñ ENHANCED CHESS ENGINE - COMPUTER VS HUMAN")
    print("=" * 60)
    
    print("""
üéÆ NEW COMPUTER VS HUMAN FEATURES:

‚úÖ MULTIPLE GAME MODES:
   ‚Ä¢ Human vs Human - Traditional two-player chess
   ‚Ä¢ Human vs Computer (White) - Computer plays white pieces
   ‚Ä¢ Human vs Computer (Black) - Computer plays black pieces  
   ‚Ä¢ Computer vs Computer - Watch two engines battle

‚úÖ INTELLIGENT TURN MANAGEMENT:
   ‚Ä¢ Prevents human moves when it's computer's turn
   ‚Ä¢ Automatic computer move triggering
   ‚Ä¢ Clear visual indicators of whose turn it is
   ‚Ä¢ Smart drag-and-drop restrictions

‚úÖ COMPUTER PLAYER FEATURES:
   ‚Ä¢ Adjustable engine depth (1-8 levels)
   ‚Ä¢ Configurable thinking time
   ‚Ä¢ Real-time move evaluation display
   ‚Ä¢ Automatic move execution

‚úÖ AUTO-PLAY MODE:
   ‚Ä¢ Computer vs Computer with automatic moves
   ‚Ä¢ Adjustable speed control (0.5-10 seconds)
   ‚Ä¢ Start/stop auto-play controls
   ‚Ä¢ Real-time game progression

‚úÖ ENHANCED USER INTERFACE:
   ‚Ä¢ Game mode selector dropdown
   ‚Ä¢ Computer move button (when it's computer's turn)
   ‚Ä¢ Auto-play controls for computer vs computer
   ‚Ä¢ Clear status messages and turn indicators

üéØ HOW TO USE THE NEW FEATURES:

1. SELECT GAME MODE:
   ‚Ä¢ Use the "Game Mode" dropdown to choose:
     - Human vs Human (traditional)
     - Human vs Computer (choose who plays white/black)
     - Computer vs Computer (watch engines play)

2. HUMAN VS COMPUTER:
   ‚Ä¢ Make your moves normally (drag/drop or click)
   ‚Ä¢ Computer automatically moves after you
   ‚Ä¢ "Make Computer Move" button available if needed
   ‚Ä¢ Engine depth and speed are adjustable

3. COMPUTER VS COMPUTER:
   ‚Ä¢ Select "Computer vs Computer" mode
   ‚Ä¢ Click "Start Auto Play" to begin
   ‚Ä¢ Adjust speed with "Computer Speed" slider
   ‚Ä¢ Watch the engines battle automatically

4. GAME CONTROLS:
   ‚Ä¢ All standard controls work in all modes
   ‚Ä¢ Undo moves, new games, Chess960 support
   ‚Ä¢ Engine analysis available in all modes

üåü SMART FEATURES:

‚úÖ TURN PROTECTION:
   ‚Ä¢ Can't move opponent's pieces
   ‚Ä¢ Can't move when it's computer's turn
   ‚Ä¢ Clear error messages for invalid actions

‚úÖ AUTOMATIC FLOW:
   ‚Ä¢ Computer moves trigger automatically
   ‚Ä¢ Smooth transitions between turns
   ‚Ä¢ No manual intervention needed

‚úÖ VISUAL FEEDBACK:
   ‚Ä¢ "Computer Thinking..." status messages
   ‚Ä¢ Turn indicators show human/computer
   ‚Ä¢ Move highlighting for computer suggestions

‚úÖ PERFORMANCE OPTIMIZED:
   ‚Ä¢ Fast computer move calculation
   ‚Ä¢ Responsive interface during computer thinking
   ‚Ä¢ Efficient auto-play timing

üéÆ GAME MODE EXAMPLES:

‚Ä¢ LEARNING MODE: Human vs Computer (Computer: Black)
  - You play white, computer responds as black
  - Great for learning and practice
  - Computer provides consistent challenge

‚Ä¢ ANALYSIS MODE: Human vs Computer (Computer: White)  
  - Computer opens, you respond
  - Learn from computer's opening choices
  - Practice defensive play

‚Ä¢ ENTERTAINMENT MODE: Computer vs Computer
  - Watch two engines battle
  - Observe different playing styles
  - Great for demonstrations

‚Ä¢ TRADITIONAL MODE: Human vs Human
  - Classic two-player chess
  - All enhanced features still available
  - Perfect for local multiplayer
""")

    # Try to open the web browser automatically
    url = "http://localhost:8083"
    
    print(f"\nüöÄ LAUNCHING ENHANCED WEB INTERFACE:")
    print(f"   URL: {url}")
    print(f"   Features: Computer vs Human, Auto-play, Chess960")
    
    try:
        webbrowser.open(url)
        print("‚úÖ Web browser opened automatically")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not open browser automatically: {e}")
        print(f"   Please manually open: {url}")
    
    # Test the computer functionality
    print(f"\nüß™ RUNNING FUNCTIONALITY TESTS:")
    success = test_computer_functionality()
    
    if success:
        print(f"\n‚úÖ All computer functionality tests passed!")
    else:
        print(f"\n‚ùå Some tests failed - check server status")
    
    print(f"\nüìã TESTING CHECKLIST:")
    print(f"   ‚ñ° Try Human vs Computer mode")
    print(f"   ‚ñ° Test Computer vs Computer auto-play")
    print(f"   ‚ñ° Verify turn restrictions work")
    print(f"   ‚ñ° Test computer move button")
    print(f"   ‚ñ° Try different engine depths")
    print(f"   ‚ñ° Test auto-play speed control")
    print(f"   ‚ñ° Verify Chess960 works with computer")
    
    print(f"\nüéâ Enhanced chess engine with computer opponents is ready!")
    print(f"   Full computer vs human functionality active.")
    print(f"   Auto-play and intelligent turn management enabled.")

if __name__ == "__main__":
    demo_computer_vs_human()
